---
- name: Setup OS groups
  ansible.builtin.group:
    name: "{{ item.name }}"
    state: "{{ item.state | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
  with_items: "{{ os_groups }}"

- name: Setup OS users
  ansible.builtin.user:
    append: "{{ item.append | default(omit) }}"
    comment: "{{ item.comment | default(omit) }}"
    create_home: "{{ item.create_home | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    password_lock: "{{ item.password_lock | default(omit) }}"
    shell: "{{ item.shell | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
    uid: "{{ item.uid | default(omit) }}"
  with_items: "{{ os_users }}"

- name: "Lock the password of the default user if we authenticated with a key - {{ ansible_user }}"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    password_lock: true
  # Make sure that we authenticated with a key before locking the password
  when: ansible_password is not defined

- name: Check if the public keys file for SSH exists - {{ ansible_user }}
  # No need to use superuser privileges for this because the file should be
  # available locally to the user running Ansible
  become: false
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ home_lab_node_ssh_public_key_path }}"
  register: ssh_public_key_path_stat
  when:
    - home_lab_node_ssh_public_key_path is defined
    - home_lab_node_ssh_public_key_path | length > 0

- name: Set authorized key for the user - {{ ansible_user }}
  ansible.posix.authorized_key:
    exclusive: true
    key: "{{ lookup('file', home_lab_node_ssh_public_key_path) }}"
    state: present
    user: "{{ ansible_user }}"
  when:
    - home_lab_node_ssh_public_key_path is defined
    - home_lab_node_ssh_public_key_path | length > 0
    - ssh_public_key_path_stat.stat.exists

- name: Add configured user accounts to passwordless sudoers
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item }}'
    line: '{{ item }} ALL=(ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'
    mode: "0440"
  with_items: "{{ security_sudoers_passwordless }}"

- name: Add configured user accounts to passworded sudoers
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item }}'
    line: '{{ item }} ALL=(ALL) ALL'
    state: present
    validate: 'visudo -cf %s'
    mode: "0440"
  with_items: "{{ security_sudoers_passworded }}"

- name: Create a directory for OpenSSH configuration - {{ ansible_user }}
  ansible.builtin.file:
    path: "{{ ansible_user_ssh_configuration_directory_path }}"
    state: directory
    group: "{{ ansible_user }}"
    owner: "{{ ansible_user }}"
    mode: "0700"

- name: Generate an OpenSSH keypair - {{ ansible_user }}
  community.crypto.openssh_keypair:
    group: "{{ ansible_user }}"
    owner: "{{ ansible_user }}"
    path: "{{ ansible_user_ssh_configuration_directory_path }}/id_rsa"
...
