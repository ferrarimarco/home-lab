---
- name: Initialize the list of OS services to restart
  # For item.item, see https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html#registering-variables-with-a-loop
  # "When you use register with a loop, the data structure placed in the variable will contain a results attribute
  # that is a list of all responses from the module. This differs from the data structure returned when using register without a loop."
  ansible.builtin.set_fact:
    os_services_to_restart: "{{ os_services_to_restart + item.item.os_services_to_restart }}"
  when: item.changed and item.item.os_services_to_restart is defined
  with_items: "{{ copied_configuration_files.results | default([]) + configured_files_and_directories_result.results | default([]) + system_wide_rendered_templates.results | default([]) }}"

- name: Restart OS services
  become: true
  ansible.builtin.service:
    name: "{{ item }}"
    state: "restarted"
  with_items: "{{ os_services_to_restart | unique }}"

- name: Pull container images
  changed_when: '"Pull complete" in docker_compose_pull_result.stdout or "Pull complete" in docker_compose_pull_result.stderr'
  ansible.builtin.command: >
    docker compose \
    --file {{ item.compose_file_path }} \
    pull \
    --ignore-buildable \
    --include-deps
  register: docker_compose_pull_result
  when:
    - configure_docker
    - item.pull_container_images
  with_items: "{{ docker_compose_up_items | unique }}"

- name: Start Docker Compose services
  changed_when: '"Started" in docker_compose_up_result.stdout or "Started" in docker_compose_up_result.stderr'
  ansible.builtin.command: >
    docker compose \
    --file {{ item.compose_file_path }} \
    up \
    --build \
    --detach \
    --remove-orphans
  register: docker_compose_up_result
  when:
    - configure_docker
    - item.start_containerized_services
  with_items: "{{ docker_compose_up_items | unique }}"

- name: Debug docker_compose_up_result
  ansible.builtin.debug:
    var: docker_compose_up_result
    verbosity: 1

- name: Initialize the list of the 'just started' Docker Compose services
  ansible.builtin.set_fact:
    started_docker_compose_services: "{{ started_docker_compose_services | default([]) + [ item.item.compose_file_path ] }}"
  when:
    - item.changed
  with_items: "{{ docker_compose_up_result.results }}"

- name: Debug started_docker_compose_services
  ansible.builtin.debug:
    var: started_docker_compose_services
    verbosity: 1

- name: Initialize the list of Docker Compose services to restart
  ansible.builtin.set_fact:
    docker_compose_services_to_restart: "{{ docker_compose_services_to_restart | default([]) + item.item.docker_compose_services_to_restart }}"
  when:
    - item.changed
    - item.item.docker_compose_services_to_restart is defined
    # Don't add items if we modified the compose file because Docker Compose already handles this case
    - item.item.dest is not search(".+compose\.yaml$")
  with_items: "{{ copied_configuration_files.results | default([]) + configured_files_and_directories_result.results | default([]) + system_wide_rendered_templates.results | default([]) }}"

- name: Debug docker_compose_services_to_restart
  ansible.builtin.debug:
    var: docker_compose_services_to_restart
    verbosity: 1

- name: Restart Docker Compose services
  changed_when: '"Started" in docker_compose_restart_result.stdout or "Started" in docker_compose_restart_result.stderr'
  ansible.builtin.command: >
    docker compose \
    --file {{ item.compose_file_path }} \
    restart
  register: docker_compose_restart_result
  when:
    - configure_docker
    - item.start_containerized_services
    # Don't restart this Docker Compose service if we just started it
    - item.compose_file_path not in started_docker_compose_services | default([])
  with_items: "{{ docker_compose_services_to_restart | unique }}"
