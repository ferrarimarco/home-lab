---
# Configuration directories
media_stack_configuration_directory_path: "{{ home_lab_configuration_directory_path }}/media-stack"

jellyfin_configuration_directory_path: "{{ media_stack_configuration_directory_path }}/jellyfin"
media_stack_jellyseerr_configuration_directory_path: "{{ media_stack_configuration_directory_path }}/jellyseerr"
media_stack_lidarr_configuration_directory_path: "{{ media_stack_configuration_directory_path }}/lidarr"
media_stack_radarr_configuration_directory_path: "{{ media_stack_configuration_directory_path }}/radarr"
media_stack_readarr_configuration_directory_path: "{{ media_stack_configuration_directory_path }}/readarr"
media_stack_sonarr_configuration_directory_path: "{{ media_stack_configuration_directory_path }}/sonarr"
media_stack_torrent_configuration_directory_path: "{{ home_lab_configuration_directory_path }}/qbittorrent"

# Runtime data directories
jellyfin_cache_directory_path: "{{ jellyfin_runtime_data_directory_path }}/cache"
jellyfin_runtime_data_directory_path: "{{ home_lab_runtime_directory_path }}/jellyfin"
media_stack_media_library_path: "{{ media_directory_path }}/media"
media_stack_torrent_download_path: "{{ media_directory_path }}/downloads"

media_stack_configuration_directories:
  - path: "{{ media_stack_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - path: "{{ jellyfin_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - path: "{{ jellyfin_runtime_data_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - path: "{{ jellyfin_cache_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"
    path: "{{ media_stack_jellyseerr_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"
    path: "{{ media_stack_lidarr_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"
    path: "{{ media_stack_radarr_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"
    path: "{{ media_stack_readarr_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"
    path: "{{ media_stack_sonarr_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"
  - group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"
    path: "{{ media_stack_torrent_configuration_directory_path }}"
    state: "{{ configure_media_stack | ternary('directory', 'absent') }}"

media_stack_docker_compose_up_items:
  - compose_file_path: "{{ media_stack_configuration_directory_path }}/{{ default_docker_compose_file_name }}"
    enable_containerized_services: "{{ configure_media_stack }}"
    pull_container_images: "{{ configure_media_stack }}"
    start_containerized_services: "{{ start_media_stack | default(configure_media_stack) }}"
    stop_containerized_services: "{{ stop_media_stack | default(false) }}"

media_stack_templates_to_render:
  - src: "media-stack/{{ default_docker_compose_file_name }}.jinja"
    dest: "{{ media_stack_configuration_directory_path }}/{{ default_docker_compose_file_name }}"
    state: "{{ configure_media_stack | ternary('file', 'absent') }}"
    docker_compose_services_to_restart: "{{ media_stack_docker_compose_up_items }}"
  - src: "media-stack/qbittorrent/qBittorrent.conf.jinja"
    dest: "{{ media_stack_torrent_configuration_directory_path }}/qBittorrent.conf"
    state: "{{ configure_media_stack | ternary('file', 'absent') }}"
    docker_compose_services_to_restart: "{{ media_stack_docker_compose_up_items }}"
    group: "{{ media_stack_owner_group_id }}"
    owner: "{{ media_stack_owner_user_id }}"

# The qbittorrent container image creates a user with the specified uid and gid that takes owenership of the configuration directory.
# Ansible may emit a warning because a user with such ids doesn't exist on the system, but it does in the container.
media_stack_owner_group_id: "1000"
media_stack_owner_user_id: "1000"
media_stack_umask: "002"

# Paths
media_stack_torrent_map_destination_download_path: /data/downloads

# Ports
media_stack_flaresolverr_port: 8191
media_stack_lidarr_port: 8686
media_stack_jellyfin_port: 8096
media_stack_jellyseerr_port: 5055
media_stack_prowlarr_port: 9696
media_stack_radarr_port: 7878
media_stack_readarr_port: 8787
media_stack_sonarr_port: 8989
