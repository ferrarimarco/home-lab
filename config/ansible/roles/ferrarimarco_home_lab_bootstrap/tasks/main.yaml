---
- name: Print information about the target host
  ansible.builtin.import_tasks: print-host-info.yaml
  tags:
    - always

- name: Validate the runtime environment before running the configuration process
  ansible.builtin.import_tasks: pre-flight-checks.yaml
  tags:
    - always

- name: Load a variable file based on the OS type, or a default if not found.
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "{{ ansible_distribution }}.yaml"
    - "{{ ansible_os_family }}.yaml"
    - "default.yaml"
  tags:
    - always

- name: Register facts
  ansible.builtin.import_tasks:
    file: register-bootstrap-facts.yaml
  tags:
    - always

- name: Setup OS
  ansible.builtin.include_tasks:
    file: "{{ item }}"
  with_first_found:
    - "setup-{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "setup-{{ ansible_distribution }}.yaml"
    - "setup-{{ ansible_os_family }}.yaml"

- name: Configure Home Lab configuration directories
  ansible.builtin.file:
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    owner: "{{ item.owner | default('root') }}"
    path: "{{ item.path }}"
    state: directory
  with_items:
    - path: "{{ home_lab_configuration_directory_path }}"
    - path: "{{ home_lab_runtime_directory_path }}"

- name: Clone the Home Lab configuration repository
  ansible.builtin.git:
    accept_newhostkey: true
    clone: true
    dest: "{{ home_lab_main_repository_path }}"
    # Discard local modifications by default
    force: true
    recursive: true
    repo: "{{ home_lab_configuration_repository_url }}"
    update: true

- name: Configure host configuration OS services
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    force: "{{ item.force | default(omit) }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  notify: restart host configuration service
  with_items:
    - src: "host-configuration/{{ host_configuration_service_name }}.service.jinja"
      dest: "{{ systemd_system_services_configuration_directory }}/{{ host_configuration_service_name }}.service"
    - src: "host-configuration/{{ host_configuration_service_name }}.timer.jinja"
      dest: "{{ systemd_system_services_configuration_directory }}/{{ host_configuration_service_name }}.timer"

# Don't start services because timers take care of that
- name: Ensure that the host configuration services are enabled at boot
  ansible.builtin.service:
    name: "{{ host_configuration_service_name }}"
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"

- name: Setup systemd
  ansible.builtin.import_tasks: setup-systemd.yaml
  when:
    - ansible_service_mgr == 'systemd'

- name: Ensure handlers are notified now
  ansible.builtin.meta: flush_handlers
...
