---
dependency:
  name: galaxy
  requirements-file: requirements.yml
driver:
  name: docker
platforms:
  - name: instance
    image: "${ANSIBLE_TEST_DISTRO}"
    command: ${ANSIBLE_TEST_DOCKER_COMMAND}
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    privileged: true
    pre_build_image: true
provisioner:
  name: ansible
  # Molecule doesn't currently support reusing an existing ansible.cfg file
  # so we need to repeat ourselves
  # Ref: https://ansible.readthedocs.io/projects/molecule/configuration/#molecule.provisioner.ansible.Ansible
  config_options:
    defaults:
      callbacks_enabled: ansible.posix.profile_roles,ansible.posix.profile_tasks,ansible.posix.timer
      stdout_callback: ansible.posix.debug
      stderr_callback: ansible.posix.debug
  inventory:
    host_vars:
      instance:
        ansible_user: root
        cam_3_rtps_password: "cam_3_rtps_password"
        cam_3_rtps_username: "cam_3_rtps_username"
        configure_asuswrt_chkwan: true
        configure_backup_restic: true
        configure_docker: true
        # TODO: Enable after we have more space on the GitHub Actions runner
        # configure_frigate: true
        # configure_home_assistant: true
        configure_media_stack: true
        configure_monitoring_backend: true
        # TODO: Enable configure_monitoring_nut after we install packages before rendering templates
        # configure_monitoring_nut: true
        # TODO: Enable configure_monitoring_ont after we don't fail running the service if the ONT is not reachable
        # configure_monitoring_ont: true
        configure_mqtt_broker: true
        configure_network_shares: true
        configure_network_stack: true
        configure_ssh: true
        configure_syncthing: true
        # TODO: Enable after we support configuring Tailscale and running it separately
        # configure_tailscale: true
        # TODO: Enable configure_wifi after we install packages before rendering templates
        # configure_wifi: true
        configure_zigbee2mqtt: true
        frigate_http_endpoint_fqdn: "frigate"
        grafana_http_endpoint_fqdn: "grafana"
        has_coral_pci_accelerator: true
        home_assistant_http_endpoint_fqdn: "home-assistant"
        home_assistant_internal_url_home: "http://home-assistant"
        home_assistant_secrets:
          country: "country"
          currency: "currency"
          elevation_home: "elevation_home"
          latitude_home: "latitude_home"
          longitude_home: "longitude_home"
          name_home: "name_home"
          spotify_client_id: "spotify_client_id"
          spotify_client_secret: "spotify_client_secret"
          telegram_bot_api_key: "telegram_bot_api_key"
          telegram_bot_allowed_chat_ids:
            - "telegram_bot_allowed_chat_id_1"
            - "telegram_bot_allowed_chat_id_2"
          timezone_home: "timezone_home"
        home_lab_configuration_directory_path: /etc/home-lab
        home_lab_runtime_directory_path: /var/lib/home-lab
        is_proxmox_node: true
        media_directory_path: "/media"
        media_stack_flaresolverr_http_endpoint_fqdn: "flaresolverr"
        media_stack_jellyfin_http_endpoint_fqdn: "jellyfin"
        media_stack_jellyseerr_http_endpoint_fqdn: "jellyseerr"
        media_stack_prowlarr_http_endpoint_fqdn: "prowlarr"
        media_stack_radarr_http_endpoint_fqdn: "radarr"
        media_stack_sonarr_http_endpoint_fqdn: "sonarr"
        monitoring_nut_http_endpoint_fqdn: "nut"
        monitoring_nut_server_admin_password: "monitoring-nut-password"
        monitoring_nut_server_admin_username: "monitoring-nut-user"
        mosquitto_server_fqdn: "mosquitto"
        network_interfaces:
          - mac_address: "12:34:56:78:90:AB"
            interface_name: eth0
            ipv4_address: "10.0.0.2"
        prometheus_blackbox_exporter_http_endpoint_fqdn: "prometheus-blackbox-exporter"
        prometheus_http_endpoint_fqdn: "prometheus"
        media_stack_qbittorrent_webui_password: "media_stack_qbittorrent_webui_password"
        restic_backup_default_backup_job_repository_password: restic_backup_default_backup_job_repository_password
        restic_backup_repositories_default_path: /tmp/restic-backup-default-backup-job-target-directory
        qbittorrent_http_endpoint_fqdn: "qbittorrent"
        # Don't start network stack because we cannot bind certain ports (53)
        # on hosts in the CI environment
        start_network_stack: false
        # Don't start restic because we can't start the restic exporter against a non-existing repository
        start_restic: false
        # Don't start zigbee2mqtt because it fails due to missing hardware
        start_zigbee2mqtt: false
        syncthing_user_interface_http_endpoint_fqdn: "syncthing"
        torrent_download_path: "/torrent-download-path"
        zigbee2mqtt_http_endpoint_fqdn: "zigbee2mqtt"
        vault_asuswrt_administrator_username: "vault_asuswrt_administrator_username"
        vault_asuswrt_administration_ssh_port: "1234"
        vault_media_stack_qbittorrent_webui_password: "vault_media_stack_qbittorrent_webui_password"
  options:
    # Enable Ansible diff mode
    D: true
  playbooks:
    converge: "${ANSIBLE_TEST_PLAYBOOK_PATH}"
