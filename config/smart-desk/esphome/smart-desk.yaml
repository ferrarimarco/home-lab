---
# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_api_encryption_key

captive_portal: null

display:
  - platform: lcd_pcf8574
    dimensions: ${lcd_width}x${lcd_height}
    address: 0x27
    lambda: |-
      it.printf(0, 0, "IP: %s", id(wifi_ip_v4_address).state.c_str());
      it.printf(0, 2, "Distance: %.2f cm", id(ultrasonic_distance_sensor).state);

      static int p1 = 0;

      char const *fqdn = "FQDN: ${fqdn}";
      int fqdn_length = strlen(fqdn);
      if (fqdn_length > ${lcd_width}) fqdn_length = ${lcd_width};

      int spaces_length = fqdn_length >= ${lcd_width} ? 0 : ${lcd_width} - fqdn_length + 1;
      char spaces[spaces_length];
      for (int i = 0; i < spaces_length - 1; i++) spaces[i] = ' ';
      spaces[spaces_length - 1] = '\0';

      it.printf(0, 1, "%.*s%s", fqdn_length, fqdn + p1, spaces);

      p1++;
      if(p1 > strlen(fqdn) - ${lcd_width}) {
        p1 = 0;
      }

      it.printf(0, 3, "                    ");
      if (id(extend_actuators).state) {
        it.printf(0, 3, "Extending actuators");
      } else if (id(retract_actuators).state) {
        it.printf(0, 3, "Retracting actuators");
      } else {
        it.printf(0, 3, "Actuators stopped");
      }

    update_interval: 1s

esp32:
  board: featheresp32
  framework:
    type: arduino

esphome:
  name: smart-desk

i2c:
  frequency: 100kHz
  sda: 23
  scl: 22

light:
  - platform: status_led
    name: "ESP32 Status LED"
    pin: GPIO13

# Enable logging
logger:
  level: DEBUG
  logs:
    sensor: INFO
    ultrasonic.sensor: INFO

ota:
  password: !secret esphome_ota_password

prometheus: null

script:
  - id: extend_actuators_script
    then:
      - logger.log: "Extending the actuators..."
      # No need to turn off the other relays because the interlock group takes care of that
      - switch.turn_on: desk_relay_1
      - switch.turn_on: desk_relay_3
      # Turn the actuators off anyway as a safety measure
      - delay: 90s
      - logger.log: "Safety timer expired. Stopping the actuators. Stopping the actuators in any case."
      - script.execute: turn_actuators_off_script
  - id: retract_actuators_script
    then:
      - logger.log: "Retracting the actuators..."
      # No need to turn off the other relays because the interlock group takes care of that
      - switch.turn_on: desk_relay_2
      - switch.turn_on: desk_relay_4
      # Turn the actuators off anyway as a safety measure
      - delay: 90s
      - logger.log: "Safety timer expired. Stopping the actuators in any case."
      - script.execute: turn_actuators_off_script
  - id: turn_actuators_off_script
    then:
      - logger.log: "Turning the actuators off..."
      - switch.turn_off: desk_relay_1
      - switch.turn_off: desk_relay_2
      - switch.turn_off: desk_relay_3
      - switch.turn_off: desk_relay_4
      # Stop the other scripts because they might be running and waiting for the
      # safety timer to expire, but we explicitly stop the actuators here, so
      # there's no need for the safety timer at this point.
      - script.stop: extend_actuators_script
      - script.stop: retract_actuators_script

sensor:
  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    update_interval: 60s
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
  - id: ultrasonic_distance_sensor
    platform: ultrasonic
    trigger_pin: GPIO27
    echo_pin: GPIO15
    name: "Ultrasonic distance sensor"
    # Minimum recommended is 60ms (source: HC-SR04 datasheet)
    update_interval: 100ms
    # The number of meters for the sensor to timeout
    timeout: 4m
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 30s
  - id: smart_desk_height
    accuracy_decimals: 2
    lambda: |-
      return id(ultrasonic_distance_sensor_filtered_delta).state + ${desk_feet_height_m} + ${controller_box_height_m};
    name: "Desk height"
    platform: template
    unit_of_measurement: m
    update_interval: 500ms
  - id: ultrasonic_distance_sensor_filtered_delta
    accuracy_decimals: 2
    lambda: |-
      return id(ultrasonic_distance_sensor).state;
    name: "Ultrasonic distance sensor (filtered)"
    platform: template
    unit_of_measurement: m
    update_interval: 500ms
    filters:
      # We know max and min allowed reads
      - lambda: |-
          if (x > 0.5 && x < 0.85) {
            return x;
          } else {
            return {};
          }
      - median:
          window_size: 3
          send_every: 1
      - delta: 0.01

switch:
  - id: desk_relay_1
    interlock: &interlock_group_actuator_1 [desk_relay_1, desk_relay_2]
    internal: true
    platform: gpio
    pin:
      inverted: true
      number: 33
    restore_mode: ALWAYS_OFF
    name: "Desk relay 1"
  - id: desk_relay_2
    interlock: *interlock_group_actuator_1
    internal: true
    platform: gpio
    pin:
      inverted: true
      number: 32
    restore_mode: ALWAYS_OFF
    name: "Desk relay 2"
  - id: desk_relay_3
    interlock: &interlock_group_actuator_2 [desk_relay_3, desk_relay_4]
    internal: true
    platform: gpio
    pin:
      inverted: true
      number: 14
    restore_mode: ALWAYS_OFF
    name: "Desk relay 3"
  - id: desk_relay_4
    interlock: *interlock_group_actuator_2
    internal: true
    platform: gpio
    pin:
      inverted: true
      number: 12
    restore_mode: ALWAYS_OFF
    name: "Desk relay 4"
  - id: extend_actuators
    platform: template
    name: "Extend actuators"
    lambda: |-
      if (id(desk_relay_1).state && id(desk_relay_3).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - script.execute: extend_actuators_script
    turn_off_action:
      - script.execute: turn_actuators_off_script
  - id: retract_actuators
    platform: template
    name: "Retract actuators"
    lambda: |-
      if (id(desk_relay_2).state && id(desk_relay_4).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - script.execute: retract_actuators_script
    turn_off_action:
      - script.execute: turn_actuators_off_script

substitutions:
  device_name_upper: Smart Desk
  device_name: smart-desk
  fqdn: ${device_name}.${network_domain}
  lcd_height: "4"
  lcd_width: "20"
  # Height of the controller box + distance sensor heads when the distance sensor faces the bottom of the desk top
  controller_box_height_m: "0.165"
  desk_feet_height_m: "0.04"
  max_actuators_extension_m: "0.35"
  # max_desk_height_m = ${min_desk_height_m} + ${max_actuators_extension_m}
  max_desk_height_m: "1.085"
  min_desk_height_m: "0.735"
  network_domain: edge.lab.ferrari.how

text_sensor:
  - platform: version
    name: "ESPHome Version"
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_info
    ip_address:
      id: wifi_ip_v4_address
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results

web_server: null

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name_upper} Fallback Hotspot"
    password: !secret wifi_fallback_hostspot_password
  domain: .${network_domain}
  password: !secret wifi_password
  ssid: !secret wifi_ssid
...
