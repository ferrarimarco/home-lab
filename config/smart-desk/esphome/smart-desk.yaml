---
# Enable Home Assistant API
api:
  password: !secret home_assistant_api_key

captive_portal:

display:
  - platform: lcd_pcf8574
    dimensions: ${lcd_width}x${lcd_height}
    address: 0x27
    lambda: |-
      it.printf(0, 0, "IP: %s", id(wifi_ip_v4_address).state.c_str());
      // it.print(0, 1, "FQDN: ${fqdn}");
      it.printf(0, 2, "Distance: %.2f cm", id(ultrasonic_distance_sensor).state);

      static int p1 = 0;

      char const *fqdn = "FQDN: ${fqdn}";
      int fqdn_length = strlen(fqdn);
      if (fqdn_length > ${lcd_width}) fqdn_length = ${lcd_width};

      int spaces_length = fqdn_length >= ${lcd_width} ? 0 : ${lcd_width} - fqdn_length + 1;
      char spaces[spaces_length];
      for (int i = 0; i < spaces_length - 1; i++) spaces[i] = ' ';
      spaces[spaces_length - 1] = '\0';

      it.printf(0, 1, "%.*s%s", fqdn_length, fqdn + p1, spaces);

      p1++;
      if(p1 > strlen(fqdn) - ${lcd_width}) {
        p1 = 0;
      }

    update_interval: 1s

esp32:
  board: featheresp32
  framework:
    type: arduino

esphome:
  name: smart-desk

i2c:
  sda: 23
  scl: 22

light:
  - platform: status_led
    name: "ESP32 Status LED"
    pin: GPIO13

# Enable logging
logger:

ota:
  password: !secret home_assistant_api_key

prometheus:

sensor:
  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    update_interval: 60s
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
  - id: ultrasonic_distance_sensor
    filters:
      - multiply: 100
    platform: ultrasonic
    trigger_pin: GPIO27
    echo_pin: GPIO15
    name: "Ultrasonic distance sensor"
    unit_of_measurement: "cm"
    update_interval: 100ms
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 30s

switch:
  - id: desk_relay_1
    interlock: &interlock_group_actuator_1 [desk_relay_1, desk_relay_2]
    platform: gpio
    pin:
      inverted: true
      number: 33
    restore_mode: ALWAYS_OFF
    name: "Desk relay 1"
  - id: desk_relay_2
    interlock: *interlock_group_actuator_1
    platform: gpio
    pin:
      inverted: true
      number: 32
    restore_mode: ALWAYS_OFF
    name: "Desk relay 2"
  - id: desk_relay_3
    interlock: &interlock_group_actuator_2 [desk_relay_3, desk_relay_4]
    platform: gpio
    pin:
      inverted: true
      number: 14
    restore_mode: ALWAYS_OFF
    name: "Desk relay 3"
  - id: desk_relay_4
    interlock: *interlock_group_actuator_2
    platform: gpio
    pin:
      inverted: true
      number: 12
    restore_mode: ALWAYS_OFF
    name: "Desk relay 4"

substitutions:
  device_name: smart-desk
  device_name_upper: Smart Desk
  fqdn: ${device_name}.${network_domain}
  network_domain: edge.lab.ferrari.how
  lcd_height: "4"
  lcd_width: "20"

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_info
    ip_address:
      id: wifi_ip_v4_address
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results

web_server:

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name_upper} Fallback Hotspot"
    password: !secret wifi_fallback_hostspot_password
  domain: .${network_domain}
  password: !secret wifi_password
  ssid: !secret wifi_ssid
...
