---
- name: Setup variables
  ansible.builtin.import_tasks: include-variables.yaml
  tags:
    - always

- name: Set the ownership of system-wide configuration directories
  ansible.builtin.file:
    group: root
    mode: "0755"
    owner: root
    path: "{{ item }}"
  become: true
  with_items: "{{ directories_to_ensure_ownership }}"

- name: Create system-wide configuration directories
  ansible.builtin.file:
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    owner: "{{ item.owner | default('root') }}"
    path: "{{ item.path }}"
    state: directory
  become: true
  with_items: "{{ configuration_directories_to_create }}"

- name: Copy configuration directories
  ansible.builtin.copy:
    src: "{{ item.src }}/"
    dest: "{{ item.dest }}/"
    group: root
    directory_mode: "0755"
    mode: "0644"
    owner: root
  become: true
  register: system_wide_copied_configuration_directories
  with_items: "{{ configuration_directories_to_copy }}"

- name: Copy system-wide, templated configuration files in place
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    force: "{{ item.force | default(omit) }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  become: true
  register: system_wide_rendered_templates
  tags:
    - templates
  with_items: "{{ templates_to_render }}"

- name: Download files
  become: true
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  register: system_wide_downloaded_files
  with_items: "{{ files_to_download }}"

# Run cleanup tasks because we may need to stop processes and services before
# removing resources on which those processes might depend
- name: Run system-wide cleanup handlers
  ansible.builtin.import_tasks: invoke-system-wide-configuration-cleanup-handlers.yaml
  become: true

- name: Remove files and directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  become: true
  with_items: "{{ files_to_remove }}"

- name: Include users setup tasks
  ansible.builtin.import_tasks: users.yaml
  become: true

- name: Create Samba share directories
  ansible.builtin.file:
    group: "{{ item.directory_group }}"
    mode: "{{ item.directory_mask }}"
    owner: "{{ item.directory_owner }}"
    path: "{{ item.path }}"
    state: directory
  become: true
  with_items: "{{ samba_shares }}"

- name: Include Debian tasks
  ansible.builtin.import_tasks: setup-Debian.yaml
  when: ansible_facts.os_family == 'Debian'

- name: Include Systemd tasks
  ansible.builtin.import_tasks: setup-systemd.yaml
  become: true

- name: Include SSH tasks
  ansible.builtin.import_tasks: ssh.yaml
  become: true

- name: Include Raspberry Pi tasks
  ansible.builtin.import_tasks: setup-raspberry-pi.yaml
  when: is_raspberry_pi

- name: Include OS services tasks
  ansible.builtin.import_tasks: os-services.yaml
  become: true

- name: Include disk setup tasks
  ansible.builtin.import_tasks: setup-disks.yaml
  become: true

- name: Include Argon One case tasks
  ansible.builtin.import_tasks: setup-argonone-case.yaml
  become: true
  when: has_argonone_case

- name: Configure cron jobs
  ansible.builtin.cron:
    backup: "{{ item.backup | default(omit) }}"
    cron_file: "{{ item.cron_file | default(omit) }}"
    day: "{{ item.day | default(omit) }}"
    disabled: "{{ item.disabled | default(omit) }}"
    env: "{{ item.env | default(omit) }}"
    hour: "{{ item.hour | default(omit) }}"
    insertafter: "{{ item.insertafter | default(omit) }}"
    insertbefore: "{{ item.insertbefore | default(omit) }}"
    job: "{{ item.job | default(omit) }}"
    minute: "{{ item.minute | default(omit) }}"
    month: "{{ item.month | default(omit) }}"
    name: "{{ item.name }}"
    special_time: "{{ item.special_time | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    user: "{{ item.user | default(omit) }}"
    weekday: "{{ item.weekday | default(omit) }}"
  become: "{{ item.become | default(omit) }}"
  tags:
    - cron_jobs
  with_items: "{{ cron_jobs }}"

- name: Run system-wide configuration handlers
  ansible.builtin.import_tasks: invoke-system-wide-configuration-handlers.yaml
  become: true
...
